# Get pluto running

set width unlimited
set height unlimited

file /usr/local/libexec/ipsec/pluto
set args --leak-detective --config /etc/ipsec.conf --nofork
tbreak main
run

# with the libraries loaded, set all the breakpoints

break verify_end_cert
commands
  echo end_cert:\n
  print end_cert
  echo root_certs:\n
  print root_certs
  print *root_certs
  print *(root_certs->trustcl)
  echo root_certs.trustcl list:\n
  set $node = root_certs->trustcl->list.next
  if $node != 0
    print $node
    print *((CERTCertListNode*)$node)
    set $node = $node->next
    while $node != root_certs->trustcl->list.next
      print $node
      print *((CERTCertListNode*)$node)
      set $node = $node->next
    end
  end
  printf "\n"
  continue
end
break nss_cert_verify.c:331
commands
  detach
end

# ... calls CERT_PKIXVerifyCert()
break CERT_PKIXVerifyCert
commands
  silent
  printf "CERT_PKIXVerifyCert(): cert(to verify): %p usages: %x ...\n", cert, usages
  printf "  paramsIn:\n"
  set $param = paramsIn
  while $param.type != cert_pi_end
    printf "    "
    output *$param
    printf "\n"
    if $param.type == cert_pi_trustAnchors
      set $list = $param.value.pointer.chain
      set $object = ((PKIX_PL_Object *)$list)-1
      set $node = $list.list.next
      if $node != 0
        set $cert = (CERTCertListNode*)$node
        printf "      %p\n", $cert
	printf "        "
        output *$cert
        printf "\n"
	printf "        "
        output *$cert.cert
        printf "\n"
        set $node = $node.next
        while $node != $list.list.next
          set $cert = (CERTCertListNode*)$node
          printf "      %p\n", $cert
  	  printf "        "
          output *$cert
          printf "\n"
	  printf "        "
          output *$cert.cert
          printf "\n"
          set $node = $node->next
        end
      end
    end
    set $param = $param + 1
  end
  printf "  paramsOut:\n"
  set $param = paramsOut
  while $param.type != cert_po_end
    printf "    "
    output *$param
    printf "\n"
    set $param = $param + 1
  end
  continue
end

# ... calls PKIX_BuildChain()
break PKIX_BuildChain
commands
  continue
end

# ... calls pkix_Build_InitiateBuildChain()
break pkix_Build_InitiateBuildChain
commands
  print *procParams
  continue
end

# pkix_Build_SortCandidateCerts
break pkix_Build_SortCandidateCerts
commands
  silent
  printf "pkix_Build_SortCandidateCerts(): candidates: %p ...\n", candidates
  continue
end

# pkix_Build_SelectCertsFromTrustAnchors
break pkix_Build_SelectCertsFromTrustAnchors
commands
  silent
  continue
end

# inlined, ugh
break pkix_Build_GatherCerts
commands
  printf "pkix_Build_GatherCerts():\n"
  up
  up
  echo state.buildConstants.certStores (used to getCert):\n
  set $list = state.buildConstants.certStores
  set $object = ((PKIX_PL_Object *)$list)-1
  printf "  list: %p references: %d type: ", $list, $object.references
  output (PKIX_TYPENUM)$object.type
  printf "\n"
  set $element = $list.next
  set $n = 0
  while $element != 0
    set $object = ((PKIX_PL_Object *)$element)-1
    printf "    element %d: %p references: %d type: ", $n, $element, $object.references
    output (PKIX_TYPENUM)$object.type
    printf "\n"
    set $object = ((PKIX_PL_Object *)$element.item)-1
    printf "      item: %p references: %d type: ", $element.item, $object.references
    output (PKIX_TYPENUM)$object.type
    printf "\n"
    set $element = $element.next
    set $n = $n + 1
  end
  echo state.buildConstants.anchors (used to get):\n
  set $list = state.buildConstants.anchors
  set $object = ((PKIX_PL_Object *)$list)-1
  printf "  list: %p references: %d type: ", $list, $object.references
  output (PKIX_TYPENUM)$object.type
  printf "\n"
  set $element = $list.next
  set $n = 0
  while $element != 0
    set $object = ((PKIX_PL_Object *)$element)-1
    printf "    element %d: %p references: %d type: ", $n, $element, $object.references
    output (PKIX_TYPENUM)$object.type
    printf "\n"
    set $object = ((PKIX_PL_Object *)$element.item)-1
    printf "      item: %p references: %d type: ", $element.item, $object.references
    output (PKIX_TYPENUM)$object.type
    printf "\n"
    set $element = $element.next
    set $n = $n + 1
  end
  continue
end
break pkix_build.c:1718
commands
  silent
  printf "  ... pkix_Build_GatherCerts(): certStore: %p\n", certStore
  printf "    "
  output *certStore
  printf "\n"
  continue
end

break pkix_Build_RemoveDupUntrustedCerts
commands
  silent
  printf "pkix_Build_RemoveDupUntrustedCerts(): certsFound: ?\n"
  printf "  trustedCertList:\n"
  set $list = trustedCertList
  set $object = ((PKIX_PL_Object *)$list)-1
  if $list != 0
    set $object = ((PKIX_PL_Object *)$list)-1
    printf "    list: %p references: %d type: ", $list, $object.references
    output (PKIX_TYPENUM)$object.type
    printf "\n"
    set $element = $list.next
    set $n = 0
    while $element != 0
      set $object = ((PKIX_PL_Object *)$element)-1
      printf "      element %d: %p references: %d type: ", $n, $element, $object.references
      output (PKIX_TYPENUM)$object.type
      printf "\n"
      set $object = ((PKIX_PL_Object *)$element.item)-1
      printf "        item: %p references: %d type: ", $element.item, $object.references
      output (PKIX_TYPENUM)$object.type
      printf "\n"
      if $object.type == PKIX_CERT_TYPE
        set $cert = (PKIX_PL_Cert*)($element.item)
        printf "          cert: %p %s\n", $cert.nssCert, $cert.nssCert.subjectName
      end
      set $element = $element.next
      set $n = $n + 1
    end
  end
  continue
end

break pkix_pl_Pk11CertStore_CertQuery
commands
  continue
end

break pkix_pl_Cert_CreateWithNSSCert
commands
  silent
  printf "pkix_pl_Cert_CreateWithNSSCert():\n"
  printf "  nssCert: %p %s\n", nssCert, nssCert.subjectName
  continue
end
# print object returned by alloc
break pkix_pl_cert.c:1429
commands
  silent
  printf "  cert: %p %s\n", cert.nssCert, cert.nssCert.subjectName
  continue
end


# break pkix_pl_PK11CertStore_GetCert
break pkix_pl_pk11certstore.c:660
commands
  silent
  printf "pkix_pl_PK11CertStore_GetCert(): store: %p selector: %p length: %d\n", store, selector
  print selector
  print *selector
  continue
end

break pkix_CacheCert_Add
commands
  silent
  printf "pkix_CacheCert_Add(): store: %p ...\n", store
  printf "  certs:\n"
  set $list = certs
  set $object = ((PKIX_PL_Object *)$list)-1
  printf "    list: %p references: %d type: ", $list, $object.references
  output (PKIX_TYPENUM)$object.type
  printf "\n"
  set $element = $list.next
  set $n = 0
  while $element != 0
    set $object = ((PKIX_PL_Object *)$element)-1
    printf "      element %d: %p references: %d type: ", $n, $element, $object.references
    output (PKIX_TYPENUM)$object.type
    printf "\n"
    set $object = ((PKIX_PL_Object *)$element.item)-1
    printf "        item: %p references: %d type: ", $element.item, $object.references
    output (PKIX_TYPENUM)$object.type
    printf "\n"
    if $object.type == PKIX_CERT_TYPE
      set $cert = (PKIX_PL_Cert*)($element.item)
      printf "          cert: %p %s\n", $cert.nssCert, $cert.nssCert.subjectName
    end
    set $element = $element.next
    set $n = $n + 1
  end
  continue
end
break pkix_tools.c:1234
commands
  silent
  printf "  ... pkix_CacheCert_Add(): cachedValues: ...\n"
  # list
  set $list = cachedValues
  set $object = ((PKIX_PL_Object *)$list)-1
  printf "  list: %p references: %d type: ", $list, $object.references
  output (PKIX_TYPENUM)$object.type
  printf "\n"
  set $element = $list.next
  set $n = 0
  while $element != 0
    set $object = ((PKIX_PL_Object *)$element)-1
    printf "    element %d: %p references: %d type: ", $n, $element, $object.references
    output (PKIX_TYPENUM)$object.type
    printf "\n"
    set $object = ((PKIX_PL_Object *)$element.item)-1
    printf "      item: %p references: %d type: ", $element.item, $object.references
    output (PKIX_TYPENUM)$object.type
    printf "\n"
    if $object.type == PKIX_LIST_TYPE
      set $ee = ((PKIX_List*)$element.item).next
      set $m = 0
      while $ee != 0
        set $object = ((PKIX_PL_Object *)$ee)-1
        printf "        element %d: %p references: %d type: ", $m, $ee, $object.references
        output (PKIX_TYPENUM)$object.type
        printf "\n"
	set $object = ((PKIX_PL_Object *)$ee.item)-1
        printf "          item: %p references: %d type: ", $ee.item, $object.references
        output (PKIX_TYPENUM)$object.type
        printf "\n"
	if $object.type == PKIX_CERT_TYPE
	  set $cert = ((PKIX_PL_Cert*)$ee.item)
	  printf "            cert: %p %s\n", $cert.nssCert, $cert.nssCert.subjectName
	end
        set $ee = $ee.next
	set $m = $m + 1
      end
    end
    set $element = $element.next
    set $n = $n + 1
  end
  continue
end

break pkix_CacheCert_Lookup
commands
  continue
end

#
# PKIX_List_*
#

# break PKIX_List_Create
break pkix_list.c:1279
commands
  silent
  printf "PKIX_List_Create(): returns %p\n", *pList
  continue
end

# break PKIX_List_AppendItem
break PKIX_List_AppendItem
commands
  silent
  printf "PKIX_List_AppendItem() list: %p length: %d item: %p ...\n", list, list.length, item
  continue
end
# after append
break pkix_list.c:1428
commands
  silent
  printf "  ... PKIX_List_AppendItem():  list: %p length: %d item: %p ...\n", list, list.length, item
  # list
  set $list = list
  set $object = ((PKIX_PL_Object *)$list)-1
  printf "  list: %p references: %d type: ", $list, $object.references
  output (PKIX_TYPENUM)$object.type
  printf "\n"
  set $element = $list.next
  set $n = 0
  while $element != 0
    if $n == list.length-1
      printf "   +"
    else
      printf "    "
    end
    set $object = ((PKIX_PL_Object *)$element)-1
    printf "element %d: %p references: %d type: ", $n, $element, $object.references
    output (PKIX_TYPENUM)$object.type
    printf "\n"
    set $object = ((PKIX_PL_Object *)$element.item)-1
    printf "      item: %p references: %d type: ", $element.item, $object.references
    output (PKIX_TYPENUM)$object.type
    printf "\n"
    if $object.type == PKIX_CERT_TYPE
      set $cert = ((PKIX_PL_Cert*)$element.item)
      printf "        cert: %p %s\n", $cert.nssCert, $cert.nssCert.subjectName
    end
    set $element = $element.next
    set $n = $n + 1
  end
  continue
end

# break PKIX_List_InsertItem
break pkix_list.c:1487
commands
  silent
  printf "PKIX_List_InsertItem() list: %p length: %d index: %d, item: %p\n", list, list.length, index, item
  # list
  set $list = list
  set $object = ((PKIX_PL_Object *)$list)-1
  printf "  list: %p references: %d type: ", $list, $object.references
  output (PKIX_TYPENUM)$object.type
  printf "\n"
  set $element = $list.next
  set $n = 0
  while $element != 0
    if $n == index
      printf "   +"
    else
      if $n == index + 1
        printf "   *"
      else
        printf "    "
      end
    end
    set $object = ((PKIX_PL_Object *)$element)-1
    printf "element %d: %p references: %d type: ", $n, $element, $object.references
    output (PKIX_TYPENUM)$object.type
    printf "\n"
    set $object = ((PKIX_PL_Object *)$element.item)-1
    printf "      item: %p references: %d type: ", $element.item, $object.references
    output (PKIX_TYPENUM)$object.type
    printf "\n"
    set $element = $element.next
    set $n = $n + 1
  end
  continue
end

break PKIX_List_GetItem
commands
  silent
  printf "PKIX_List_GetItem() list: %p length: %d index: %d\n", list, list.length, index
  # list
  set $list = list
  set $object = ((PKIX_PL_Object *)$list)-1
  printf "  list: %p references: %d type: ", $list, $object.references
  output (PKIX_TYPENUM)$object.type
  printf "\n"
  set $element = $list.next
  set $n = 0
  while $n < index
    set $element = $element.next
    set $n = $n + 1
  end
  set $object = ((PKIX_PL_Object *)$element)-1
  printf "    element %d: %p references: %d type: ", $n, $element, $object.references
  output (PKIX_TYPENUM)$object.type
  printf "\n"
  set $object = ((PKIX_PL_Object *)$element.item)-1
  printf "      item: %p references: %d type: ", $element.item, $object.references
  output (PKIX_TYPENUM)$object.type
  printf "\n"
  if $object.type == PKIX_CERT_TYPE
    set $cert = ((PKIX_PL_Cert*)($element.item))
    printf "        cert: %p %s\n", $cert.nssCert, $cert.nssCert.subjectName
  end
  continue
end

break PKIX_List_DeleteItem
commands
  silent
  printf "PKIX_List_DeleteItem(): list: %p length: %d index: %d\n", list, list.length, index
  # list
  set $list = list
  set $object = ((PKIX_PL_Object *)$list)-1
  printf "  list: %p references: %d type: ", $list, $object.references
  output (PKIX_TYPENUM)$object.type
  printf "\n"
  set $element = $list.next
  set $n = 0
  while $element != 0
    if $n == index
      printf "   -"
    else
      if $n == index+1
        # sliced out
        printf "    *"
      else
        printf "    "
      end
    end
    set $object = ((PKIX_PL_Object *)$element)-1
    printf "element %d: %p references: %d type: ", $n, $element, $object.references
    output (PKIX_TYPENUM)$object.type
    printf "\n"
    set $object = ((PKIX_PL_Object *)$element.item)-1
    printf "      item: %p references: %d type: ", $element.item, $object.references
    output (PKIX_TYPENUM)$object.type
    printf "\n"
    if $object.type == PKIX_CERT_TYPE
      set $cert = (PKIX_PL_Cert*)($element.item)
      printf "        cert: %p %s\n", $cert.nssCert, $cert.nssCert.subjectName
    end
    set $element = $element.next
    set $n = $n + 1
  end
  continue
end

break pkix_List_Remove
commands
  silent
  printf "PKIX_List_Remove(): list: %p length: %d object: %p (calls DeleteItem)\n", list, list.length, object
  continue
end

break PKIX_List_SetItem
commands
  silent
  printf "PKIX_List_SetItem(): list: %p length: %d index: %d item: %p references: %d type: ", list, list.length, index, item, ((PKIX_PL_Object *)item)[-1].references
  output (PKIX_TYPENUM)((PKIX_PL_Object *)item)[-1].type
  printf "\n"
  # list
  set $list = list
  set $object = ((PKIX_PL_Object *)$list)-1
  printf "  list: %p references: %d type: ", $list, $object.references
  output (PKIX_TYPENUM)$object.type
  printf "\n"
  set $element = $list.next
  set $n = 0
  while $element != 0
    if $n == index
      printf "   *"
    else
      printf "    "
    end
    set $object = ((PKIX_PL_Object *)$element)-1
    printf "element %d: %p references: %d type: ", $n, $element, $object.references
    output (PKIX_TYPENUM)$object.type
    printf "\n"
    set $object = ((PKIX_PL_Object *)$element.item)-1
    printf "      item: %p references: %d type: ", $element.item, $object.references
    output (PKIX_TYPENUM)$object.type
    printf "\n"
    set $element = $element.next
    set $n = $n + 1
  end
  continue
end

break pkix_List_Duplicate
commands
  continue
end

# break PKIX_PL_Object_Alloc
break pkix_pl_object.c:599
commands
  silent
  printf "PKIX_PL_Object_Alloc(): returns: %p references: %d type: ", (object+1), object.references
  output (PKIX_TYPENUM)object.type
  printf "\n"
  # can't dump cert as not yet initialized
  continue
end

break PKIX_PL_Object_Equals
commands
  silent
  printf "PKIX_PL_Object_Equals(): firstObject: %p secondObject: %p\n", firstObject, secondObject
  continue
end

# ... calls PKIX_BuildChain()
break pkix_List_MergeLists
commands
  silent
  printf "pkix_List_MergeLists(): firstList: %p secondList: %p ...", firstList, secondList
  continue
end

# now advance to the event loop and load the command

tbreak event_base_loop
continue
shell ipsec auto --add nss-cert-chain &
continue
